'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LazyLoad = (function (_Component) {
  _inherits(LazyLoad, _Component);

  function LazyLoad(props) {
    _classCallCheck(this, LazyLoad);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(LazyLoad).call(this, props));

    _this.state = {
      visible: false
    };

    _this.onWindowScroll = _this.onWindowScroll.bind(_this);
    return _this;
  }

  _createClass(LazyLoad, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('scroll', this.onWindowScroll);
      window.addEventListener('resize', this.onWindowScroll);
      this.onWindowScroll();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (!this.state.visible) this.onWindowScroll();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.onVisible();
    }
  }, {
    key: 'onVisible',
    value: function onVisible() {
      window.removeEventListener('scroll', this.onWindowScroll);
      window.removeEventListener('resize', this.onWindowScroll);
    }
  }, {
    key: 'onWindowScroll',
    value: function onWindowScroll() {
      var threshold = this.props.threshold;

      var bounds = (0, _reactDom.findDOMNode)(this).getBoundingClientRect();
      var scrollTop = window.pageYOffset;
      var top = bounds.top + scrollTop;
      var height = bounds.bottom - bounds.top;

      if (top === 0 || top <= scrollTop + window.innerHeight + threshold && top + height > scrollTop - threshold) {
        this.setState({ visible: true });
        this.onVisible();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var elStyles = {
        height: this.props.height
      };
      var elClasses = (0, _classnames2.default)({
        'lazy-load': true,
        'lazy-load-visible': this.state.visible
      });

      return _react2.default.createElement(
        'div',
        { className: elClasses, style: elStyles },
        this.state.visible && this.props.children
      );
    }
  }]);

  return LazyLoad;
})(_react.Component);

exports.default = LazyLoad;

LazyLoad.propTypes = {
  children: _react.PropTypes.node.isRequired,
  height: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
  threshold: _react.PropTypes.number
};
LazyLoad.defaultProps = {
  threshold: 0
};